name: Build and Release AppBundles - NG

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      script_pattern:
        description: "Pattern to match scripts to build (leave empty to build all)"
        required: false
        default: ""
      release:
        description: "Create a release (true/false)"
        required: false
        default: "true"
      appbundle_fs:
        description: "Filesystem type for AppBundle (valid ones include: dwarfs, squashfs)"
        required: false
        default: "dwarfs"

jobs:
  build:
    name: Build AppBundles
    runs-on: ubuntu-latest
    permissions: write-all
    container:
      image: "docker.io/azathothas/appbundler-alpine:latest"
      options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate TAG_NAME
        id: set_tag_name
        run: |
          TAG_NAME="v${GITHUB_RUN_NUMBER}-$(date +'%Y%m%d%H%M%S')"
          echo "$TAG_NAME" > tag_name.txt
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV

      - name: Upload TAG_NAME artifact
        uses: actions/upload-artifact@v4
        with:
          name: tag-name
          path: tag_name.txt

      - name: Add non-compliant tools
        run: |
          apk add bash file binutils patchelf findutils grep sed coreutils strace fuse3

      - name: Set up GOBIN and install lib4bin
        run: |
          set -x
          export GOBIN="$GITHUB_WORKSPACE/.local/bin"
          export CGO_ENABLED=0
          export GO_LDFLAGS='-buildmode=static-pie'
          export GOFLAGS='-ldflags=-static-pie -ldflags=-s -ldflags=-w'
          export DBIN_INSTALL_DIR="$GOBIN"
          mkdir -p "$GOBIN"
          echo "DBIN_INSTALL_DIR=$DBIN_INSTALL_DIR" >> $GITHUB_ENV
          echo "PATH=$GOBIN:$PATH" >> $GITHUB_ENV
          if [ "${{ github.event.inputs.appbundle_fs }}" = "" ]; then
            echo "PBUNDLE_FS=dwarfs" >> $GITHUB_ENV
          else
            echo "PBUNDLE_FS=${{ github.event.inputs.appbundle_fs }}" >> $GITHUB_ENV
          fi

          wget -qO- "https://raw.githubusercontent.com/xplshn/dbin/master/stubdl" | sh -s -- --install "$DBIN_INSTALL_DIR/dbin" add zstd/zstd zstd/zstdcat
          
          # Set up the PELF toolchain
          wget -qO "$DBIN_INSTALL_DIR/pelf" "https://github.com/xplshn/pelf/releases/latest/download/pelf_$(uname -m)" && chmod +x "$DBIN_INSTALL_DIR/pelf"
          wget -qO "$DBIN_INSTALL_DIR/pelfCreator" "https://github.com/xplshn/pelf/releases/latest/download/pelfCreator_$(uname -m)" && chmod +x "$DBIN_INSTALL_DIR/pelfCreator"
          wget -qO "$DBIN_INSTALL_DIR/appstream-helper" "https://github.com/xplshn/pelf/releases/latest/download/appstream-helper_$(uname -m)" && chmod +x "$DBIN_INSTALL_DIR/appstream-helper"

          export BASE_ARCHLINUX="/tmp/pelfCreatorExtension_archLinux_$(uname -m)"
          mkdir "$BASE_ARCHLINUX"
          wget -qO- "https://github.com/xplshn/pelf/releases/latest/download/pelfCreatorExtension_archLinux_$(uname -m).tar.zst" | zstdcat | tar xf - -C "$BASE_ARCHLINUX"

      - name: Set OUT_DIR environment variable
        run: |
          OUT_DIR="$GITHUB_WORKSPACE/APPBUNDLES"
          META_OUT_DIR="$GITHUB_WORKSPACE/APPBUNDLES_META"
          mkdir -p "$OUT_DIR" "$META_OUT_DIR"
          echo "OUT_DIR=${OUT_DIR}" >> $GITHUB_ENV
          echo "META_OUT_DIR=${META_OUT_DIR}" >> $GITHUB_ENV

      - name: List available scripts
        run: |
          echo "Listing available recipes:"
          tree "$GITHUB_WORKSPACE/recipes"

      - name: Run selected build scripts
        run: |
          ls "$GITHUB_WORKSPACE/baseSystems"
          set -x
          export PATH="$GITHUB_WORKSPACE/baseSystems:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          cd $OUT_DIR
          SCRIPT_PATTERN="${{ github.event.inputs.script_pattern }}"
          if [ -z "$SCRIPT_PATTERN" ]; then
            echo "No script pattern provided, running all scripts."
            PATTERN=".*"
          else
            PATTERN="$SCRIPT_PATTERN"
          fi
          for script in "$GITHUB_WORKSPACE/recipes/"*/*.*sh; do
            if echo "$script" | grep -E "$PATTERN"; then
              chmod +x "$script"
              DEBUG=x "$script"
            fi
          done

      - name: Generate metadata
        run: |
          ls -FAlsh "$OUT_DIR"
          FILE_NOEXT="$META_OUT_DIR/metadata_$(uname -m)-$(basename "$(uname -o)")"
          appstream-helper --input-dir "$OUT_DIR" --output-file "${FILE_NOEXT}.json" --output-markdown "${FILE_NOEXT}.md" --repo-name "AppBundleHUB" --download-prefix "https://github.com/xplshn/AppBundleHUB/releases/download/${{ env.TAG_NAME }}/"

      - name: Upload app bundle artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-bundles
          path: ${{ env.OUT_DIR }}/*.AppBundle

      - name: List generated metadata files
        run: |
          ls ${{ env.META_OUT_DIR }}/*

      - name: Upload metadata artifacts
        uses: actions/upload-artifact@v4
        with:
          name: metadata
          path: ${{ env.META_OUT_DIR }}/*

  release:
    name: Release AppBundles
    runs-on: ubuntu-latest
    needs: build
    permissions: write-all
    if: ${{ github.event.inputs.release == 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download app bundle artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-bundles
          path: ${{ github.workspace }}

      - name: Download metadata artifact
        uses: actions/download-artifact@v4
        with:
          name: metadata
          path: ${{ github.workspace }}

      - name: Manage Tags
        run: |
          git fetch --tags
          TAGS=$(git tag | grep -v "^latest_metadata$" | sort -V)
          TAG_COUNT=$(echo "$TAGS" | wc -l)
          if [ "$TAG_COUNT" -gt 5 ]; then
            TAGS_TO_DELETE=$(echo "$TAGS" | head -n -1)
            for TAG in $TAGS_TO_DELETE; do
              git tag -d "$TAG"
              git push origin --delete "$TAG"
            done
          fi

      - name: Download TAG_NAME artifact
        uses: actions/download-artifact@v4
        with:
          name: tag-name

      - name: Read TAG_NAME
        id: get_tag_name
        run: |
          TAG_NAME=$(cat tag_name.txt)
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV

      - name: Create Git Tag
        run: |
          git tag "${{ env.TAG_NAME }}"
          git push origin "${{ env.TAG_NAME }}"

      - name: Determine if pre-release
        id: determine_prerelease
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "prerelease=true" >> $GITHUB_ENV
          else
            echo "prerelease=false" >> $GITHUB_ENV
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2.2.2
        with:
          name: "Weekly Release - ${{ env.TAG_NAME }}"
          tag_name: "${{ env.TAG_NAME }}"
          prerelease: ${{ env.prerelease }}
          draft: false
          generate_release_notes: false
          make_latest: true
          files: |
            ${{ github.workspace }}/*.AppBundle
            ${{ github.workspace }}/metadata_*.*
        continue-on-error: true

  publish_metadata:
    name: Publish Metadata
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.inputs.release == 'true' }}
    permissions: write-all
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download metadata artifact
        uses: actions/download-artifact@v4
        with:
          name: metadata
          path: ${{ github.workspace }}

      - name: Update latest_metadata tag and create release
        run: |
          git fetch --tags
          if git tag -l | grep -q "^latest_metadata$"; then
            git tag -d latest_metadata
            git push origin --delete latest_metadata || true
          fi
          git tag latest_metadata
          git push origin latest_metadata

      - name: Download TAG_NAME artifact
        uses: actions/download-artifact@v4
        with:
          name: tag-name

      - name: Read TAG_NAME
        id: get_tag_name
        run: |
          TAG_NAME=$(cat tag_name.txt)
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV

      - name: Create Release for Metadata
        uses: softprops/action-gh-release@v2.2.2
        with:
          name: "Latest Metadata"
          tag_name: "latest_metadata"
          files: |
            ${{ github.workspace }}/metadata_*.*
            ${{ github.workspace }}/*.png
            ${{ github.workspace }}/*.svg
            ${{ github.workspace }}/*.desktop
            ${{ github.workspace }}/*.xml
          body: "Metadata files for ${{ env.TAG_NAME }}"
          draft: false
          prerelease: true
          make_latest: false
